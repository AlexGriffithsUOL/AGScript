program         ::= { declaration } ;

declaration     ::= function_decl | variable_decl ;

function_decl   ::= FUNCTION IDENTIFIER LEFT_PARENTHESIS [ parameter_list ] RIGHT_PARENTHESIS block ;

parameter_list  ::= IDENTIFIER { COMMA IDENTIFIER } ;

variable_decl   ::= LET IDENTIFIER [ ASSIGN expression ] SEMI_COLON ;

block           ::= LEFT_BRACE { statement } RIGHT_BRACE ;

statement       ::= expression_statement
                  | if_statement
                  | while_statement
                  | return_statement
                  | for_statement
                  | variable_decl
                  | block
                  | SEMI_COLON
                  ;

expression_statement ::= expression SEMI_COLON ;

if_statement    ::= IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement [ ELSE statement ] ;

while_statement ::= WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ;

for_statement   ::= FOR LEFT_PARENTHESIS [ variable_decl | expression_statement | SEMI_COLON ]
                        expression SEMI_COLON
                        [ expression ]
                   RIGHT_PARENTHESIS statement ;

return_statement ::= RETURN [ expression ] SEMI_COLON ;

expression      ::= assignment ;

assignment      ::= IDENTIFIER ASSIGN assignment
                  | logical_or
                  ;

logical_or      ::= logical_and { OR logical_and } ;

logical_and     ::= equality { AND equality } ;

equality        ::= comparison { (EQUAL | NOT_EQUAL) comparison } ;

comparison      ::= addition { (LESS_THAN | LESS_THAN_OR_EQUAL | GREATER_THAN | GREATER_THAN_OR_EQUAL) addition } ;

addition        ::= multiplication { (ADD | SUBTRACT) multiplication } ;

multiplication  ::= unary { (MULTIPLY | DIVIDE) unary } ;

unary           ::= (NOT | SUBTRACT) unary
                  | primary
                  ;

primary         ::= INT_LITERAL
                  | FLOAT_LITERAL
                  | STRING_LITERAL
                  | BOOLEAN_LITERAL
                  | NULL_LITERAL
                  | IDENTIFIER
                  | FUNCTION_CALL
                  | LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
                  ;

FUNCTION_CALL   ::= IDENTIFIER LEFT_PARENTHESIS [ argument_list ] RIGHT_PARENTHESIS ;

argument_list   ::= expression { COMMA expression } ;
